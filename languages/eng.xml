<root>
    <ppmCommands>
        <auth>
            <description>
                Registers the email in the registry and returns an api_token\\nto enable package publishing.
            </description>
            <param name="email">
                \\tUser email.
            </param>
            <param name="registry">
                \\tSpecific registry url.
            </param>
            <usage>
                <item>
                    &lt;email&gt; [--registry URL]
                </item>
            </usage>
            <messages>
                <waitingAnswer>
                    Waiting answer from server...
                </waitingAnswer>
                <errorOccurred>
                    ERR: {0}
                </errorOccurred>
                <somethingWentWrong>
                    ERR: something went wrong
                </somethingWentWrong>
                <success>
                    Your api-key for email '{0}': {1}
                    Api-key is written to the config file.
                </success>
            </messages>
        </auth>
        <class>
            <description>
                Manages the project classes (.cls).
            </description>
            <param name="create-constructor">
                \\tCreate constructor module for class.
            </param>
            <usage>
                <item>
                    &lt;path&gt;
                </item>
                <item>
                    add &lt;path&gt;
                </item>
                <item>
                    move &lt;path&gt;
                </item>
                <item>
                    delete &lt;path&gt;
                </item>
            </usage>
            <messages>
                <classNotExists>
                    Class not exists: {0}
                </classNotExists>
                <classDeleted>
                    Class deleted: {0}
                </classDeleted>
                <classMoved>
                    Class moved: {0}
                </classMoved>
                <classAdded>
                    Class added: {0}
                </classAdded>
                <classAlreadyExists>
                    Class already exists: {0}
                </classAlreadyExists>
                <cstrDeleted>
                    Constructor for class {0} deleted
                </cstrDeleted>
                <cstrMoved>
                    Constructor for class {0} moved
                </cstrMoved>
                <cstrAdded>
                    Constructor for class {0} added
                </cstrAdded>
                <cstrAlreadyExists>
                    Constructor for class {0} already exists
                </cstrAlreadyExists>
            </messages>
        </class>
        <config>
            <description>
                Manages the ppm configuration file.
            </description>
            <param name="location">
                \\tUse config from specify location &lt;global|user|project&gt;.
            </param>
            <usage>
                <item>
                    set &lt;key&gt;=&lt;value&gt;
                </item>
                <item>
                    get &lt;key&gt;=&lt;value&gt;
                </item>
                <item>
                    delete &lt;key&gt;
                </item>
                <item>
                    edit
                </item>
                <item>
                    list
                </item>
            </usage>
            <messages>
                <unknownConfigType>
                    Unknown config type: {0}
                </unknownConfigType>
                <expectedValue>
                    Expected Value token after Key token {0}
                </expectedValue>
                <deleted>
                    key '{0}' deleted
                </deleted>
                <needSaveProject>
                    Need save project before generate config file.
                </needSaveProject>
                <fileGenerated>
                    Generated config file: {0}
                </fileGenerated>
                <unknownKey>
                    Unknown key '{0}'
                </unknownKey>
            </messages>
        </config>
        <export>
            <description>
                Exports the selected project.
            </description>
            <param name="encoding">
                \\t\\tExport files with specified encoding.
            </param>
            <param name="save-struct">
                \\tSave the RubberDuck structure when exporting a project.
            </param>
            <param name="path">
                \\t\\t\\tExport to specified folder.
            </param>
            <param name="no-clear">
                \\t\\t\\tDo not delete files from the last export.
            </param>
            <usage>
                <item>
                    [&lt;options&gt;]
                </item>
            </usage>
            <messages>
                <saveRequired>
                    ERR: It is required to save the project before exporting.
                </saveRequired>
                <exported>
                    exported {0} module{1} in {2}\\nroot folder: {3}\\n
                </exported>
            </messages>
        </export>
        <help>
            <description>
                Shows information about the command.
            </description>
            <usage>
                <item>
                    [&lt;command&gt;]
                </item>
            </usage>
            <messages>
                <unknownCommand>
                    ERR: Unknown command {0}
                </unknownCommand>
            </messages>
        </help>
        <init>
            <description>
                Create a package module.
            </description>
            <param name="name">
                \\t\\tSet project name.
            </param>
            <param name="yes">
                \\tSkips dialog and sets default values.
            </param>
            <usage>
                <item>
                    &lt;package name&gt;
                </item>
            </usage>
            <messages>
                <initialized>
                    package is initialized in {0}
                </initialized>
                <exists>
                    module already exists
                </exists>
            </messages>
        </init>
        <install>
            <description>
                Installs the selected packages.
            </description>
            <param name="local">
                \\tInstall packages and dependencies from local registry.
            </param>
            <param name="registry">
                \\tSpecific registry path or url.
            </param>
            <usage>
                <item>
                    [&lt;some package&gt;@&lt;some version&gt;] [&lt;options&gt;]
                </item>
            </usage>
            <messages>
                <installing>
                    installing...
                </installing>
                <libsNotFound>
                    ERR: packages to install not found
                </libsNotFound>
                <somethingWentWrong>
                    ERR: something went wrong, try again later
                </somethingWentWrong>
                <downloadFailed>
                    ERR: download failed: {0}
                </downloadFailed>
                <invalidCheckSum>
                    ERR: invalid check sum
                </invalidCheckSum>
                <wrongURL>
                    ERR: wrong registry url: {0}
                </wrongURL>
                <manifestNotFound>
                    ERR: manifest file not found for package: {0}
                </manifestNotFound>
                <installed>
                    successfully installed {0} packages in {1}
                </installed>
            </messages>
        </install>
        <module>
            <description>
                Manages the project modules (.bas).
            </description>
            <usage>
                <item>
                    &lt;path&gt;
                </item>
                <item>
                    add &lt;path&gt;
                </item>
                <item>
                    move &lt;path&gt;
                </item>
                <item>
                    delete &lt;path&gt;
                </item>
            </usage>
            <messages>
                <moduleNotExists>
                    Module not exists: {0}
                </moduleNotExists>
                <moduleDeleted>
                    Module deleted: {0}
                </moduleDeleted>
                <moduleMoved>
                    Module moved: {0}
                </moduleMoved>
                <moduleAdded>
                    Module added: {0}
                </moduleAdded>
                <moduleAlreadyExists>
                    Module already exists: {0}
                </moduleAlreadyExists>
            </messages>
        </module>
        <publish>
            <description>
                Publishes the package to the server or locally.
            </description>
            <param name="local">
                \\tPublish the package to the local registry.
            </param>
            <param name="registry">
                \\tSpecific registry path or url.
            </param>
            <usage>
                <item>
                    [&lt;options&gt;]
                </item>
            </usage>
            <messages>
                <filesToPublish>
                    === File to publish ===
                </filesToPublish>
                <packDetails>
                    <header>
                        === Pack details ===
                    </header>
                    <name>
                        name\\t\\t\\t
                    </name>
                    <version>
                        version\\t\\t\\t
                    </version>
                    <packSize>
                        pack size\\t\\t
                    </packSize>
                    <unpackedSize>
                        unpacked size\\t
                    </unpackedSize>
                    <totalFiles>
                        total files\\t\\t
                    </totalFiles>
                </packDetails>
                <packageModuleNotFound>
                    ERR: package module not found\\nbefor publish the package you need to run ppm "init"
                </packageModuleNotFound>
                <somethingWentWrong>
                    ERR: something went wrong, try again later
                </somethingWentWrong>
                <publishing>
                    publishing...
                </publishing>
                <published>
                    package '{0}' is published in {1}
                </published>
            </messages>
        </publish>
        <ref>
            <description>
                Manages the project references.
            </description>
            <usage>
                <item>
                    add &lt;name, path or guid&gt;
                </item>
                <item>
                    delete &lt;name, path or guid&gt;
                </item>
                <item>
                    update
                </item>
                <item>
                    list
                </item>
            </usage>
            <messages>
                <refsUpdated>
                    package references updated
                </refsUpdated>
                <refDeleted>
                    reference successfully deleted: {0} 
                </refDeleted>
                <refAdded>
                    reference successfully added: {0}  
                </refAdded>
                <cantFindRef>
                    ERR: can't find reference: {0}
                </cantFindRef>
            </messages>
        </ref>
        <search>
            <description>
                Search for the package on the server or locally
            </description>
            <param name="local">
                \\tSearch the package in the local registry.
            </param>
            <param name="registry">
                \\tSpecific registry path or url.
            </param>
            <usage>
                <item>
                    &lt;package&gt;
                </item>
            </usage>
            <messages>
                <nameMissing>
                    ERR: package name is a required parameter
                </nameMissing>
                <noMatchesFor>
                    No mathes for '{0}'
                </noMatchesFor>
            </messages>
        </search>
        <sync>
            <description>
                Synchronises project modules with files from the root folder.
            </description>
            <usage>
                <item>
                    [&lt;options&gt;]
                </item>
            </usage>
            <messages>
                <saveRequired>
                    ERR: The project was not saved.
                </saveRequired>
                <synchronisation>
                    synchronisation...
                </synchronisation>
                <synchronised>
                    successfully synchronised {0} modules in {1}
                </synchronised>
            </messages>
        </sync>
        <uninstall>
            <description>
                Removes packages with dependencies from the project if other packages do not use them.
            </description>
            <usage>
                <item>
                    [&lt;some package&gt;]
                </item>
            </usage>
            <messages>
                <uninstalling>
                    uninstalling...
                </uninstalling>
                <cantRemoveUsingDependencies>
                    ERR: it is not possible to remove dependencies that are used by other packages
                </cantRemoveUsingDependencies>
                <uninstalled>
                    successfully uninstalled {0} packages in {1}
                </uninstalled>
            </messages>
        </uninstall>
        <version>
            <description>
                Sets the new version of the package.
            </description>
            <usage>
                <item>
                    &lt;new version| major | minor | patch&gt;
                </item>
            </usage>
            <messages>
                <incorrectSyntax>
                    ERR: version must be specified in semantic versioning format (major.minor.patch
                    - 1.2.3)
                </incorrectSyntax>
            </messages>
        </version>
    </ppmCommands>
    <usage>Usage:</usage>
    <commands>Commands:</commands>
    <options>Options:</options>
    <aliases>Aliases:</aliases>
    <usageExample>
        ppm "install"\\nppm "install &lt;package&gt;"\\nppm "init"\\nppm "init &lt;package name&gt;"\\n
    </usageExample>
</root>
